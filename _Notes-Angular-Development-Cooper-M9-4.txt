=============================================================================
# Angular Development - Cooper 2023
=============================================================================

Module 3: Creating Components

  - ng generate component home  (navigate frist to the target folder)
    https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/ef40a419-5e9b-4cb9-ae32-ff87bec498ed/969bc753-869f-4c98-8ea2-c57973365871
  - declare components in a module first before you can use it

  - change prefix of selector go to angular.json --> prefix --> bot

  -  delete and regen home component. notice bot is nw used as prefix

  - using inline templates:
      https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/ef40a419-5e9b-4cb9-ae32-ff87bec498ed/969bc753-869f-4c98-8ea2-c57973365871

  - displaying images:
      https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/ef40a419-5e9b-4cb9-ae32-ff87bec498ed/0e46e742-6a5c-4dbb-b4d4-8dfa0c44a7f9
      - copy code from _course-resources to: home.component.html and home.component.css
      - copy code from _course-resources styles.css to: src/styles.css
      - npm start to test
      - copy images folder from _course-resources to src/asset folder
k
      - go to home.component.html
          change src=assets/images/robot-parts/head-big-eye.png
                 src=assets/images/robot-parts/head-friendly.png

      - /assets means - "/" means root URL of our websites then assets

      - note in angular.json we can add additional folders to the "assets" list
        "src/app/home/images"
           "assets": [
              "src/favicon.ico",
              "src/assets",
              "src/app/home/images"
            ],

   - component life-cycle-hooks
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/ef40a419-5e9b-4cb9-ae32-ff87bec498ed/ea20aba5-b116-4c34-be41-3b893ec9f5fa
      - every components has a life cycle which is defined by series of events
        that occur throughout the life of a component.
      - some lifecycle hooks occur only once and others occur multiple times
      - commonly used life cycle hooks are:
           onChanges - occurs multiple times
           onInit - occurs only once. frequently used for fetch daa
           onDestroy - occurs only once. used to cleanup

   - ng generate component catalog

Module 4: Using Angular Templates
  https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/ef40a419-5e9b-4cb9-ae32-ff87bec498ed/66552927-a376-46cc-a341-c5c771eaf1b2

  - interpolation -

  - Binding to Component Data with Interpolation.
     https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/4623aa46-bc16-4394-b680-a6c9ce70f48e/313c1a06-4ff0-4287-819d-c8b4124ac265
     - let's use the CatalogComponent to demo

     - the catalog html has a single list where a product should be displayed
        Let's wire this up to list item to show a single product

     - create productmodel.ts interface in src/app/catalog

     - add code to CatalogComponent.ts

     - add code to CatalogComponent.html <div class="product-details">
       using interpolation

     - now teat it: npm start (the CatalogComponent.Html should display "Large Cyclops")

  - Using Attribute Bindings and functions
     - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/4623aa46-bc16-4394-b680-a6c9ce70f48e/109a8d13-ed78-4c06-a4f8-ff7b5905950e

     - go to catalog.component.html add bracket to attribute name such as [alt]
       causes Angular to evaluate it as an expression.

     - in attribute binding you are binding to an expression more than you are binding
       it to a component property. Example
            [alt] = "product.name"
            <img [src]="'/assets/images/robot-parts/' + product.imageName"

     - Attribute binding is one-way binding.
     - Interpolation is a 2-way binding

     - we can also bind an attribute to a function like this. You can even pass
       parameter to the function
        <img [src]="getImageUrl(product)" [alt]="product.name"

       go to Catalog.Component.ts and create getImageUrl()

     - now test. do npm start

  - Repeating data with ngFor
     - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/4623aa46-bc16-4394-b680-a6c9ce70f48e/ed790d28-bcf0-4525-bcc7-b0df53179de9
     - products: IProduct[]; //changed "product" an array of IProduct
     - next change CatalogComponent.ts constructor to this.products and make it
       an array.
     - next go to CatalogComponent.ts and use a directive called  *ngFor
       directives prefixed with are structural directives such as *ngIf, *ngFor
       Directives that's not prefixed by * such as ngClass are called

     - *ngFor is luke a Javascript foreach loop

     - then go to CatalogComponent "li" and host the ngFor:
         <li class="product-item" *ngFor="let product pf products">

     - test with npm start. The catalog component should display all the products

  - Handling Events with Event Bindings
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/4623aa46-bc16-4394-b680-a6c9ce70f48e/f9c3dc62-a808-42bd-9326-a5642a6d3b19

      - tasks: filter the buttons in the menu when it is clicked

      - modify Catalog.Component.html

  - Handling Null Values with the Safe Navigation Operator
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/4623aa46-bc16-4394-b680-a6c9ce70f48e/a7f248ae-d3f0-46f3-a8f6-607bb7b91c9b
      - modify Catalog.Component.html and use the "?" it is called safe-navigation error

  - Hiding and Showing Content with *ngIf
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/4623aa46-bc16-4394-b680-a6c9ce70f48e/a7f248ae-d3f0-46f3-a8f6-607bb7b91c9b

      - we will add something that adds the discounted price and then we'll show and
        hide the appropriate price. Modify CatalogComponent.html
      - add the following code to calculate discount
            <div *ngIf="product.discount === 0">
            ${{product.price.toFixed(2)}}
          </div>

           <div class="discount">
             ${{(product.price * (1- product.discount)).toFixed(2)}}
          </div>
 - Formatting Data with Angular Pipes
    - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/4623aa46-bc16-4394-b680-a6c9ce70f48e/f55790da-9039-47ef-a6f2-c5a191346383


Module 5: Styling Angular Components

Module 6: Communicating Between Angular Components
  - communicating with child component
     - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/ea84c38f-9b8c-457b-9293-59de17801c39/0a378bf1-4d57-4721-83cb-af87a64c6b4a

     - create addToCart()

     - let's refactor CatalogComponent.Html

     - ng generate component product-details  (navigate frist to the src/app)

     - cut and paste lines 27-47 of Component.html and paste it in product-details component

     - cut product-deatils css in catalog.css and paste it into product-details.css

     - now put @input decorator in product-details.component
        The exclamation point tells Angular to ignore that it is not initialized
          @Input() product!: IProduct;
        The @Input tells any child that it can receive this type of data from the parent

  - communicating with parent component using @Output directive
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/ea84c38f-9b8c-457b-9293-59de17801c39/8958c646-fe1d-4446-8919-5ba9fa751270

      - shopping cart is part of the parent component (catalog component)

      - create an @Output event emitter in Product-Details called "buy". CatalogComponent.html
        listens to this event and adds the product to the shopping cart.

      - the CatalogCompoonent can listen and act on the "buy" event because ProductDetails is the
        child of the CatalogComponent.

      - this is how the event "buy" is created in the ProductDetails:
              @Output() buy = new EventEmitter()

      - npm start.
      - click the buy button. Do F12 and verify from the Console log that a product was added.


Module 7: Creating Angular Services
  - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/6a01f204-6e4a-4dc2-9269-c95178994972/239d370c-8c89-47af-88f7-3a4e38783818
  - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/6a01f204-6e4a-4dc2-9269-c95178994972/e50313f6-c053-4e00-b2f9-f078cc024b3b
  - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/6a01f204-6e4a-4dc2-9269-c95178994972/73a5ceea-35ae-40b2-a91b-7404c231f901

  - cd src/app

  - ng g service cart
      //a service doesn't use component decorator but rather "Injectable"
      @Injectable({
        providedIn: 'root'  //we always give providedIn a string of "root". the root means this service is available application wide
      })


  - transplant the cart from CatalogComponent to the service. The cart is now
    belongs to the CartService

  - after transplanting stuff from CatalogComponent we need to have an instance of the
    service in the catalogcomponent

  -  //inject the CartService in the constructor of CatalogComponent
     constructor(private cartSvc: CartService)

  - npm start --> click F12 --> looK AT cONSOLE.LOG

Module 8: Making HTTP Requests with angular
  - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/779c97bc-43ab-42d0-8226-72c993410f5c/67eb7c76-acdf-4a13-bfa0-31a8b71f21dd

  - Brice Wilson Course:
      https://app.pluralsight.com/ilx/video-courses/clips/9e167f94-ef61-476c-9857-490f10f679c1 - Applicable to Angular V12 and on

  - Angular HTTP Playbook by Zacahry Bennet (do this later)
       - https://app.pluralsight.com/ilx/video-courses/clips/c2ff2b64-1294-44ee-900c-856eea624967

  - OBSERVABLES - deals with async data
      -https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/779c97bc-43ab-42d0-8226-72c993410f5c/9487b53c-865b-40bc-9130-d158f65f68e4

      - promises -A promise in Javascript is an object which represent the eventual completion or
      failure of an asynchronous operation. Promises represent a proxy for a value which are
      getting in some point in the future.

      A promise can have 3 states which are the following:
        1. Pending: This is the initial state of the promise, the promise is now waiting for either
        to be resolved or rejected. For example, when are reaching out to the web with an AJAX
        request and wrapping the request in a promise. Then the promise will be pending in
        the time window in which the request is not returned.

        2. Fulfilled: When the operation is completed succesfully, the promise is fulfilled.
        For example, when we are reaching out to be web using AJAX for some JSON data and wrapping
        it in a promise. When we are succesfully getting data back the promise is said to be fulfilled.

        3.Rejected: When the operation has failed, the promise is rejected. For example, when we
        are reaching out to be web using AJAX for some JSON data and wrapping it in a promise.
        When we are getting a 404 error the promise has been rejected. They represent the
        eventual result of an asynchronous operation, which can be either a value or an error.

        Promise States:
         Example Javascript promise:
            promise
            .then(result => {
              // Handle the result when the promise is fulfilled
            })
            .catch(error => {
              // Handle the error when the promise is rejected
            });

      - callbacks - is a function that receives notifiction from the web server that had
        data in it. Angular doesn't use it because it has a lot of issues in it

      - see notes in source about observables

      - add http stuff cagtalogcomponent.ts

      - create api-server folder for the express node server
           - cd api-server
           - npm i
           - start the node server: npm start
           - https://localhost:8081/api/products

      - once server is setup go to CatalogComponent
          - create file proxy.conf in ./src
          - then go to Angular.json file and add the following to dev server:
                "proxyConfig": "src/proxy.conf.json"
         - get the server running with npm start

      - then create another service in src/app/catalog
         ng generate service src/app/catalog/product

      - then import  in AppModule.ts
           imports: [
           ...
           HttpClientModule
       ],
      - inject ProductService in the CatalogComponent

      - create ngOnInit() lifecycle hook and call
        the ProductService to load data.

      - lastly do npm start in the api-server folder

      - then npm start from ./src to start the website

      - you should see that the products are displayed as usual. but
        this time it is fetch from the server using http call

      Note: To verify the Http Call
          - F12
          - click Network Tab --> somewhere in the "filter line" there's an menu
            item called "Fetch/XHR" ---> Preview
          - in the left pane with title "Name" below it is the http request called "products"
            Click it to see details of the request (i.e. RequesHeader, ResponseHeader, General)
          - in this case the object/observable returned by demo robotshopm8-1-creating-product-service-observables-and-making-http-GET-requests
            is "products"
        - (Better see the file below for details )
          c:\_AMyDevops-Git-Chrome-and-Other-Stuff\_Notes-Verifying-Http-Calls-Using-Chrome-DevTools.txt

  - Making a POST request
     - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/779c97bc-43ab-42d0-8226-72c993410f5c/52d915c2-26f3-41ee-ab9c-c6ba60d982b5

     - modify src/app/CartService. Add a method called "add() (see comments in the source code )
       This method will add a product to the Cart in the server
     - now test the app:
         do nmp start on api-server
         do npm start on the src/ website
       click "buy" on any of the products

       do f12 --> Fetch/XHR --> click the request called "cart" displayed on the left pane
          --> click "Payload" menu item (it will show data being added)
          --> go to localhost:8081/api/cart to see the product being added

Module 9: Routing and Navigating with Angular
  - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/eb508314-3af6-4595-8ca9-75e5f944ca1e

  - adding routing to an Existing Project
     - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/66e2a2a5-c613-43b8-bc0c-cc657e6e64f1

     - to add routing to existing project
        - cd to root
        - Angular creates its own module for routing so:
            ng generate module app-routing --flat --module=app (prevents bg to put the module
               in its own folder. --module=app will import the routing into app.module)
        - open an update AppRoutingModule (see comments on what code needs to be added)

        - lastly open AppComponent.ts and add <router-outlet> below the <bot-site-header>

     - creating basic routes for navigation
        - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/22ddd5af-9fe8-4dc1-8ef3-df59ca57831a

        - add basic routes to App.Routing.Module
     - creating Redirect Routes
          - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/e23b4bad-4b17-442c-b5f5-2eae70404dc7

          - add code to App.Routing.Module

     - Linking to Routes
          - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/cc99633c-c246-4a6f-86b8-a5c272299ca4

          - go to SiteHeaderComponent.html and add "routerlink"  instead of href

          - after wiring it up click catalog, cart, and home and see the route changes

   - Navigating from Javascript
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/0dd5d862-95bf-4c00-a712-9944fab40235

      - open Catalog Component

      - inject the router into the constructor (see notes in source code)

   - Defining and accessing route parameters
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/66c42cd6-b60a-46cc-9bc5-bab3921a64e0

      - Route paramters are a way to define URLs with a dynamic params which are consumed
        by the receiving components.

      - ToDO:
          - we will wire up the icons in the HomeComponent.ts so that when you click
          the ROBOT HEADS, for example, it takes you to the catalogcomponent with A
          URL like "catalog/heads" and automatically filter the page to show only
          Robot Heads stuff

      - this can be accomplished by adding QUERY PARAMETERS to the URL. Go to
      HomeComponent.html and it up by adding routerlink to "<a>" tag of
      all "li" elements in the ollowing "UL"
            <ul class="robot-parts-cta">
               Example:
                <li>
                  //add the routerlink to the "<a>" tag
                  <a routerLink="/catalog" [queryParams]="{filter: 'Heads'}" class="part">
                    <img src="/assets/images/robot-parts/head-shredder.png" alt="Robot Heads" />
                    <div>ROBOT HEADS</div>
                  </a>
               </li>
            </ul>

      - after the above go to AppRoutingModule and modify the Catalog path like this:
           {path: 'catalog/:filter', component: CatalogComponent, title: "Catalog - Robot Shop"},

      - to test:
          - go to "Home"
          - click "Robot Heads" in the HomeComponent, notice that the url
            becomes: localhost:4200/catalog/Heads

      - at this point path: 'catalog/:filter' is just displaying the url: localhost:4200/catalog/Heads
      it is not actually filtering the result. Now we need to change CatalogComponent to read
      the value of the QueryParameter we call "filter.
      Inject the private route: ActivatedRoute in the constructor. It is needed by
      Angular to determine what route is clicked.

      - After doing the "ActivatedRoute" when you click Heads, Arms, Torso, Base it is
      CORRECTLY displaying the filtered products...BUT THE URL IS NOT CHANGING

   - robotshopm9-5-accessing-route-parameters-fix-catagalogcomp-url-not-updating
   fixes THE URL IS NOT CHANGING:
      - Modify ngInit in CatalogComponent. To fix it do a subscribe

         this.route.params.subscribe((params => {
          this.filter = params['filter'] ?? '';
         }))

   - Accessing Query Strings
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/d884670d-592a-4413-9f62-38610f6bfde4

      - in this lesson we will learn to use Query String Parameters. Example:
          Instead of using
            <a routerLink="/catalog/Heads"  class="part">
          We will use queryParams like this:
            <a routerLink="/catalog" [queryParams] = "{filter: 'Heads'}" class="part">

          Explanation:
           [queryParams] = "{filter: 'Heads'} - this adds a filter property with value of "Heads"
      - next go to CaalogComponrnt.html and fix it like this:
          <a routerLink="/catalog" [queryParams]="{filter: 'Heads'}"  class="button"> Heads</a>

      - now that all of the links are updated, we just need to update our CatalogComponent
      to read the queryParams:

         this.route.queryParams.subscribe((params => {
          this.filter = params['filter'] ?? ''; //if filter is not provided, set to empty string
        }))

      - lastly go to AppRoutingModule and remove "filter" from this path:
           {path: 'catalog/:filter', component: CatalogComponent, title: "Catalog - Robot Shop"},

   - Styling Active Links
      - https://app.pluralsight.com/ilx/video-courses/d5d30ea4-0af1-447a-b13a-e60a095337a6/189d8f2f-edfe-4789-ab95-904092e47770/197cfe6b-f1a6-4f21-aab9-6e65c9f48511

      - set active by underlining active menu items in Site-Header and CatalogComponent.html

Module10: Creating Angular Forms

Module11: Organizing Angular Applications with Modules

Module12: Testing Angular Applications

===================================
Useful Links
==================================
  Here are some useful links that are referenced in or supplement this course:

  - Deborah's github: https://github.com/DeborahK/Angular-GettingStarted

  - Nicer, clickable version of this file: https://github.com/DeborahK/Angular-GettingStarted/blob/master/links.md

  - Pluralsight course: https://app.pluralsight.com/library/courses/angular-2-getting-started-update

  - Discussion page for the course: https://app.pluralsight.com/library/courses/angular-2-getting-started-update/discussion

  - Official Angular documentation: https://angular.io/

  - Angular Errors List: https://angular.io/errors

  - TypeScript Playground: https://www.typescriptlang.org/play

  - Visual Studio Code (VS Code): https://code.visualstudio.com/

  - node/npm: https://nodejs.org/en/download

  - Angular: Getting Started Problem Solver Blog post that identifies common issues you may run into when using the sample code in this course, along with solutions: http://blogs.msmvps.com/deborahk/angular-2-getting-started-problem-solver/

  - Bootstrap: https://getbootstrap.com

  - Font Awesome: https://fontawesome.com

  - JavaScript Array filter function: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter

  - Web event docs: https://developer.mozilla.org/en-US/docs/Web/Events

  - Angular Update Guide (to update from one Angular version to another): https://update.angular.io/

  - Angular DevTools (Chrome extension for Angular debugging and profiling): https://chrome.google.com/webstore/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh
  - Angular ESLint (Enabling ESLint in Angular projects): https://github.com/angular-eslint/angular-eslint

  Referenced Pluralsight Courses:
  - "TypeScript: Getting Started": https://app.pluralsight.com/library/courses/getting-started-typescript

  - "Visual Studio Code": https://app.pluralsight.com/library/courses/visual-studio-code

  - "Angular Component Communication": https://app.pluralsight.com/library/courses/angular-component-communication

  - "Angular: Reactive Forms": https://app.pluralsight.com/library/courses/angular-2-reactive-forms

  - "RxJS in Angular: Reactive Development": https://app.pluralsight.com/library/courses/rxjs-angular-reactive-development

  - "Angular HTTP Communication": https://app.pluralsight.com/library/courses/angular-http-communication

  - "Angular Routing": https://app.pluralsight.com/library/courses/angular-routing

  - "Angular CLI": https://app.pluralsight.com/library/courses/angular-cli


==============================================================================
 # Angular: Getting Started by Deborah Kurata (Updated to Angular 16 Feb 2022)
 #   https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
=============================================================================

  Notes:
      - download NPM from this lik www.npmjs.com
      --->
    - got to https://nodejs.org/en/download/current/ and download node.js msi
    - run the npm install

    - How to setup an Angular2 Project
      - to manually setup Angular 2 Application - go t0 www.angular.io
      - github.com/angular/quickstart or
      - go to github.com/angular/angular-cli to use AngularCLI
      - use Starter Files --> go to github.com/deborahK/Angular2-GettingStarted

    To hide typescript generated files in VS Code;
    -go to preferences-->settings-->workspace
    / Place your settings in this file to overwrite default and user settings.
    {
      "files.exclude":{
          "app/**/*.js":true,
          "app/**/*.js.map":true
      }
    }

    {
        "files.exclude": {
            "**/.git": true,
            "**/.DS_Store": true,
            "**/*.js.map": true,
            "**/*.js": {"when": "$(basename).ts"}
        }
    }

    - ctrl + e shortcut to search for files

    - go to www.angular.io ---> tools and libraries -- UI Components --> ng2-bootstrap

Module 2:
   What is a Component
    - tip in adding import statements using intellisense
        - type the decorator or function you need. Select it. VS code
          will automatically add the import statement. Example:
          @Component --> click or select. Import statement will be added

    - Angular CLI creates the initial component .. the App component
      (we need to modify this component based on our application REQUIREMENTS)

    - a component has a view and a code-behind class. And an extra data called Meta-Data which
      defines the class as an Angular componet. Metadata has:
         - decorator - it is a function that adds metadata to a class

    - a component includes interface fragments defining a view for the application

    - we use angular binding and directives (in the html) to power up the view.
      a class that contains code and properties associated with the view. the class is created
      with typescript.

    - in addition to the class, a component contains import statements of directives it needs.

    - a class becomes a component when we it a component meta data:
        @Component(
          {
            selector: pm-app,
            template: index.html...
          }
        )

    - BOOTSTRAPPING App.component see comments in:
          app.component.ts and index.html

    - an angular app is a collection of components

    - a component has a life cycle hooks: OnInit, OnChanges, OnDestroy these hooks are interfaces
      that we need to implement in our components.

    - Pipes are used to transform bound properties.. such as currency properties that needs formatting
      Pipes are also used for filtering and sorting

    - Nested Components
       - an inner component is embedded in the outer component by sppecifying the directive name
         of the component (ex. pm-star) in the outer compoent
       - outer component (parent) communicates to the inner component using input properties
       - inner component communicates with outer using input properties and communicates to
         the outer component by raising events

       - passing data to the inner component using @input decorator in the properties of the
         of the component. @input () rating: number; - this exposes rating to the container
         to access and populate by binding.

      - passing data to the container:
          - the inner component exposes an event using @Output
              @Output() notify: eventEmitter<string> = new eventEmitter<string>();


  2. SERVICES AND DEPENDNECY INJECTION:
      - building a service: create a class; import what we need for the srvice and define
        the the metadata as a service by using the @injectable decorator

      - register the service with angular in the component tha twill use it
      - use constructor dependency injection to inject a service in a component

  3. RETRIEVING DATA USING HTTP:
      - OBSERVABLES (proposed es2016) - manages async data. we can think of it as an ARRAY whose
        items arrives async over time. To use observable now (pending es2016) we need to
        RxJS - Reactive extensions 3rd party lib

      - method in our code can subscribe to an observable(using SUBSCRIBE FUNCTION) to receive
        async notifications as new data arrives. Map operator transform the incoming data.

      - SENDING HTTP REQUEST
          - inject angular http service (import httpclient) in our component, but first
            import HttpClientModule in app.module.ts @NgModule section.

  4. WHAT IS A MODULE

      - it is use to organize the pieces of our application.
      - A CLASS WITH AN NgModule decorator
      - and angular module imports other module (route module, @angular module, 3rd party, etc.)
        and can export or re-export modules it imports.
      - it can register service providers with Angular injector making the service availalable to any
        class in the application

      - it declares the components, directives and pipes it manages under the
        declarations section //very important
          Ex.
            declarations: [
                      ProductListComponent,
                      ProductDetailComponent,
                      ProductFilterPipe
      - modules  extends our application using external libraries

      - module is great way to selectively aggregate classes from other modules and re-export them
        in a consolidated convenience module. browser module, http module and router modules
        are examples of this. see appmodule.ts

    =============================
    ROOT MDULE - APPMODULE.TS
            Note: you have to inport any FEATURE module in app.module.ts. Ex. the productmodule.ts
              that we created.

              import { NgModule } from '@angular/core';
              import { BrowserModule } from '@angular/platform-browser';
              import { HttpModule } from '@angular/http';
              import { RouterModule } from '@angular/router';
              import { AppComponent }  from './app.component';
              import { WelcomeComponent } from './home/welcome.component';

              /* Feature Modules */
              import { ProductModule } from './products/product.module';
              @NgModule({
                imports: [
                  BrowserModule,
                  HttpModule,
                  RouterModule.forRoot([
                    { path: 'welcome', component: WelcomeComponent },
                    { path: '', redirectTo: 'welcome', pathMatch: 'full' },
                    { path: '**', redirectTo: 'welcome', pathMatch: 'full' }
                  ]),
                  ProductModule
                ],
                declarations: [ //app.module manages the following components
                  AppComponent,
                  WelcomeComponent
                ],
                bootstrap: [ AppComponent ]
              })
              export class AppModule { }

      ==================================
      FEATURE MODULE - PRODUCTMODULE.TS

      - it is use to organize the pieces of our application. Example: product.module.ts
        This module is called FEATURE MODULE. It is meant to encapsulate unique business
        work flow such as Product management
                  import { NgModule } from '@angular/core';
                  import { RouterModule} from '@angular/router';
                  import { ProductListComponent } from './product-list.component'
                  import { ProductDetailComponent } from './product-detail.component';
                  import { ProductDetailGuard } from './product-guard.service';
                  import { ProductFilterPipe } from './product-filter.pipe';
                  import { ProductService } from './product.service';
                  import { SharedModule } from '../shared/shared.module';

                  @NgModule({
                    imports: [
                      SharedModule,
                      RouterModule.forChild([
                        { path: 'products', component: ProductListComponent },
                        { path: 'product/:id',
                          canActivate: [ ProductDetailGuard],
                          component: ProductDetailComponent
                        }
                      ])
                    ],
                    declarations: [ //product module manages the folowing components and pipes
                      ProductListComponent,
                      ProductDetailComponent,
                      ProductFilterPipe
                    ],
                    providers: [
                      ProductService,
                      ProductDetailGuard
                    ]
                  })
                  export class ProductModule {}
      ==================================
      SHARED MODULE  - IS A MODULE THST IS COMMONLY USED IN OTHER MODULES


  5. ROUTING BASICS
      - we need to import RouterModule in appmodule.ts
      - routing provides a way to navigate the application
      - an angular application is a SPA. All views are displayed one by one in
        index.html defined in the <body> in this case in <pm-app> </pm-app> tag:
            html>

          <head lang="en">
              <base href="/">
              <title>Acme Product Management</title>
              ....
          </head>
          <body>
              <pm-app>Loading App...</pm-app>
          </body>

  </html>
  ==============================================================================

  Mark Zamoyta's Building Angular 2.0 Framework
  ==============================================================================
  https://github.com/angular/angular-cli
  https://github.com/angular/angular-cli#updating-angular-cli

  1. Download node.js.
    - go  to https://nodejs.org/en/download/current/ and download node.js msi
    - run the npm install
  2. To Instal CLI: nmp install -g @angular/cli

    -g means global so that you will be able to access CLI from any folder

    - To display version of CLI = ng --version

  3. To Create and setup a Project using CLI
    - ng new green-nations
    - type cd green-nations
    - type "ng-serve" to start development web server
    - go to a browser and type "loclahost:4200" to run the application you should see "app works!"

    - next install bootstrap: type
        - next run npm install --save bootstrap
        - go to https://github.com/angular/angular.cli  and copy ../node_modules/bootstrap/dist/css/bootstrap.css
        - open angular-cli.json and navigate to line 20 thru 22
          and paste  "../node_modules/bootstrap/dist/css/bootstrap.css" to the apps[0].styles array

            Note: "styles.css" inside line 20 thru 22 is our global css located in "src" folder

    - now install the font
        - go to https://fonts.google.com
        - click the the + positive sign of Open Sans font
          and then click to open dialog
          and then copy the CDN link appearing below STANDARD
          and then go to "src" folder and open index.html and paste the CDN link after
          href="favicon.ico"

        - then go back to the selected google font dialog and copy this font-family: 'Open Sans', sans-serif;
          appearing below Specify in CSS.
          And then open style.css located inside src folder and create the body of style.css which is our global css
          like this and paste inside it font-family: 'Open Sans', sans-serif;:
              body{
                font-family: 'Open Sans', sans-serif;
              }

    - now look at the "App" folder

    ==========================================================================
    Angular 2 Reactive Forms - Kurata

    -  blogs.msmvps.com/deborahk/angular-2-reactive-forms
    -  github.com/deborahK/angular2-ReactiveForms


    ====================================================================================
    BUILDING Single Page Applications on ASP.NET Core with Javascript Services
    https://blogs.msdn.microsoft.com/webdev/2017/02/14/building-single-page-applications-on-asp-net-core-with-javascriptservices/

    1.Collectively the following are called JavaScriptServices:

      Microsoft.AspNetCore.SpaTemplates plugs into dotnet new, providing project templates for Angular 2, Aurelia, Knockout, React, and React+Redux applications.
      Microsoft.AspNetCore.SpaServices is how SpaTemplates-produced projects work internally. It provides useful features for SPA applications, such as server-side rendering for Angular and React applications, plus integration with Webpack build middleware.
      Microsoft.AspNetCore.NodeServices is how SpaServices works internally. It’s a low-level library that gives a fast, robust way for ASP.NET Core applications to run arbitrary JavaScript code on the server.


  2: The easiest way to get started is by using one of the project templates we’ve made available. These plug into the standard dotnet new command,
    and work on Windows, Mac, and Linux.

    To install the Single Page Application (SPA) templates, run the following command:

    dotnet new --install Microsoft.AspNetCore.SpaTemplates::*


    ======================================================================
    Developing Angular2 MVC Core in VS2017

      REQUIREMENTS
        - VS 2017
        - node.js v6 or later
        - web payload for for asp.net web development
        - note angular develeopnt using asp.net core SPA TEMPLATE are commnad line driven as of todate


      SPA TEMPLATE BENEFITS
        - Angular and ASP.NET Core is a single solution - THIS MEANS THAT IT SOLVES THE CHALLENGES OF
          BRINGING ANGULAR CLIENT-SIDE SYSTEM WITH THE ASP.NET CORE SERVER-SIDE SYSTEM. So we can host it in a
          single solution. It resolve some of the routing issues.

        - Server side pre-rendering - the advantage of this is that it leverages node on the server to create a
          a version of your page that can be downloaded very quickly when you start the application before
          the Javascript client is up and so it gives you much faster applcation launch capability.

        - Webpack dev middleware - we are leveraging this middleware. The gret thing about this webpack tool is
          it runs in the background and is constantly monitoring your source fies and will transpile your typescripts
          as created and saved. That mmeans it is always ready to go. Tht ties nicely with HOT MODULE REPLACING


        - Hote Module Replacing - this llows us to automaticall refresh our browser to display updated content as you
          modify the angular application. So this means we dont have to constanly compile our applcations. This is
          create for rapid client-side development of our application.

        - The template supports 2 build modules:
            - DEV - source maps for debugging
            - PROD - minifies and does not produce source maps

        - See Steve Sanderson blog post: http://bit.ly/spatemplate to learn more


        - https://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-2017-Launch/WEB-103

    ================================================
    How to install SPA Templates
        - verify version of node by doing "node --version" make sure it is greater than Version 6
        - dotnet new --install Microsoft.AspNetCore.SpaTemplates::*  to install spa templates
          dotnet new --install Microsoft.AspNetCore.SpaTemplates Version --0.8.5

    =================================================
    HOW TO CREATE ANGULAR SPA APPLICATIONS
    - open a commnad prompt
    - md CrankBank - create a directory
    - cd CrankBank - change directory

    - donet new -l  - run this comand to display list of available templates

    - create my new angular application: (this will create the project)
          dotnet new angular (do a dir to see projet)


    - run  dotnet restore - this will restore all packges needed. I could have done this in VS 2017
      using Nuget but  want to see progress of NPM instgall

    - type npm install - to install NPM

    - run this command bring up the project Visual Studio ---> start crankbank.csproj

  ===================================================
    PREPARING FOR OUR APP

    - delete the components we dont need.
        - CounterComponent
        - FetchDataAcomponent
        - NavMenu

        - update app.module.ts - remove imports declaration and adjust routes

        - Update AppComponent
        - update HomeComponent

    - see notes on startup.cs which contains the routing magic on the MVC side of the house
      that maps to our home controller so that we can deliever our first view via MVC

    - open Index.html this is the single page that will be served by our MVC application.

          <!--noticed we a have an app tag here which points to our app component
              in Angular
              prerender-module="ClientApp/dist/main-server - this fires the pre-rendering
              of our application to speed application launch
              -->
          <app asp-prerender-module="ClientApp/dist/main-server">Loading...</app>

          <script src="~/dist/vendor.js" asp-append-version="true"></script>

          <!--we are also launching our compiled, transpiled, minified client.js
              to launch our application located in the dist folder undert app folder-->
          @section scripts {
              <script src="~/dist/main-client.js" asp-append-version="true"></script>
          }



      - the following typscript files under ClientApp Folder are files that support hot module
        loading and starting up  our application.
          boot-client.ts
          boot-server.ts


Module 3: First things First
  - https://app.pluralsight.com/course-player?clipId=c6dfdf97-73b3-4ea9-aa9d-50bde793cf15

  - typescript we use to create an Angular App - ECMAScript ES 2015 formerlt known
    as ES6. Uses classes and arrow functions

  1. what we need:
      - install Visual Studio Code

      - install extensions suggested by John Papa
          -https://www.johnpapa.net/essential-angular-vs-code-extensions/
          - Angular-essentials

      - install NPM - a package manager for Javascript applications. We install it by installing Node.
          - navigate to https://nodejs.org/en/download --> Windows (select LTS version)
          - npm -v for version

      - define package.json to define the packages needed by the application
          "dependencies" - packages needewd for development and deployment
          "devDepemdencies" - packages needed for deployment

  2. Setting up Existing Angular Application
     - navigate to https://github.com/deborahK/Angular-GettingStarted  and do:
        - git clone https://github.com/DeborahK/Angular-GettingStarted.git

     - navigate to "C:\_Demo\Angular-2-getting-started-update-Jul2022-Repo\Angular-GettingStarted"
         and do git clone https://github.com/DeborahK/Angular-GettingStarted.git

     - navigate to "C:\_Demo\Angular-2-getting-started-update-Jul2022-Repo\Angular-GettingStarted"
        create a folder called APM-Final and copy source of APM-Final master called "APM-Final"
        and create a folder called APM and copy source code from the master called "Start"

     -  Open a terminal in VS Code and navigate to
          C:\_AMyAngularDev\Angular-Getting-Started-Kurata-Feb2024-Upd\APM
          and run NPM install --> npm start

        do the same for APM-Final


  3. Creating Angular application from scratch using Angular CLI
      https://app.pluralsight.com/course-player?clipId=6f97c3df-0511-4f83-86f7-411bd1ad260

      - we need to install Amgular CLI globally --> command prompt -->
        npm install -g @angular/cli

      - ng new apm-new --prefix pm

      - note that angular cli create index.html and the app.component.ts in  src/app folder

Module 4: Intro to Components




